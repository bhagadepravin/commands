#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    #chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /tmp/haproxy

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    #option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          10m
    timeout server          10m
    #timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000


# enable admin stats at :8000/haproxy?stats
listen admin
	bind *:8000
	stats enable



#---------------------------------------------------------------------
# Ranger frontend which proxies to the Ranger backends
#---------------------------------------------------------------------
frontend                        ranger_front_5088
    bind                        *:5088 ssl crt /var/lib/cloudera-scm-agent/agent-cert/cdep-host_key_cert_chain_decrypted.pem
    default_backend             ranger_5088

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend ranger_5088
    balance                     roundrobin
    cookie SERVERID insert indirect nocache
    server ranger1 pbhagade-2.pbhagade.root.hwx.site:6182 check ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem cookie 1
    server ranger2 pbhagade-1.pbhagade.root.hwx.site:6182 check ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem cookie 2

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  hiveserver2_front
    bind                        *:10015 ssl crt /var/lib/cloudera-scm-agent/agent-cert/cdep-host_key_cert_chain_decrypted.pem
    mode                        tcp
    option                      tcplog
    default_backend             hiveserver2

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
# This is the setup for HS2. beeline client connect to load_balancer_host:load_balancer_port.
# HAProxy will balance connections among the list of servers listed below.
backend hiveserver2
    balance                     roundrobin
    mode                        tcp
    server hiveserver2_1 pbhagade-3.pbhagade.root.hwx.site:10001 ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem check
    server hiveserver2_2 pbhagade-1.pbhagade.root.hwx.site:10001 ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem check


# Setup for Hue or other JDBC-enabled applications.
# In particular, Hue requires sticky sessions.
# The application connects to load_balancer_host:10016 ssl crt /var/lib/cloudera-scm-agent/agent-cert/cdep-host_key_cert_chain_decrypted.pem, and HAProxy balances
# connections to the associated hosts, where Hive listens for JDBC
# requests on port 10015 ssl crt /var/lib/cloudera-scm-agent/agent-cert/cdep-host_key_cert_chain_decrypted.pem.
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  hivejdbc_front
    bind                        *:10016 ssl crt /var/lib/cloudera-scm-agent/agent-cert/cdep-host_key_cert_chain_decrypted.pem
    mode                        tcp
    option                      tcplog
    stick                       match src
    stick-table type ip size 200k expire 30m
    default_backend             hivejdbc

#---------------------------------------------------------------------
# source balancing between the various backends
#---------------------------------------------------------------------
# HAProxy will balance connections among the list of servers listed below.
backend hivejdbc
    balance                     source
    mode                        tcp
    server hiveserver2_1 pbhagade-3.pbhagade.root.hwx.site:10001 ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem check
    server hiveserver2_2 pbhagade-1.pbhagade.root.hwx.site:10001 ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem check
#---------------------------------------------------------------------
# Solr frontend which proxys to the Solr backends
#---------------------------------------------------------------------
frontend                        solr_front
    bind                        *:5001 ssl crt /var/lib/cloudera-scm-agent/agent-cert/cdep-host_key_cert_chain_decrypted.pem
    default_backend             solr

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend solr
    balance                     roundrobin
    server solr1 pbhagade-1.pbhagade.root.hwx.site:8995/solr check ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem
    server solr2 pbhagade-2.pbhagade.root.hwx.site:8995/solr check ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem
    server solr3 pbhagade-3.pbhagade.root.hwx.site:8995/solr check ssl ca-file /var/lib/cloudera-scm-agent/agent-cert/cm-auto-global_cacerts.pem